{
  
    
        "post0": {
            "title": "Lemonaderecipedocx",
            "content": "LEMONADE RECIPE . Step 1: Ingredients: 3 ripe lemons (they need to be a little soft!) … . Step 2: Juice Your Lemons. You need between 1/2 and 2/3 cup of lemon juice. … . Step 3: Make the Simple Syrup. Pour one cup of sugar into your glass measuring cup and add one cup of water on top. … . Step 4: Mix and Serve! .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2023/03/21/LemonadeRecipeDocx.html",
            "relUrl": "/2023/03/21/LemonadeRecipeDocx.html",
            "date": " • Mar 21, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 2.4b Using Programs with Data, SQL",
            "content": "Database Programming is Program with Data . Each Tri 2 Final Project should be an example of a Program with Data. . Prepare to use SQLite in common Imperative Technique . Explore SQLite Connect object to establish database connection- Explore SQLite Cursor Object to fetch data from a table within a database | . Schema of Users table in Sqlite.db . Uses PRAGMA statement to read schema. . Describe Schema, here is resource Resource- What is a database schema? - Schema is essentially the category/column of a table. . What is the purpose of identity Column in SQL database? - It is used to generate key values | What is the purpose of a primary key in SQL database? - it is key column and can be used as reference when working with foreign tables | What are the Data Types in SQL table? - integer, text, blob | . import sqlite3 database = &#39;instance/sqlite.db&#39; # this is location of database def app_schema(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Fetch results of Schema results = cursor.execute(&quot;PRAGMA table_info(&#39;roof&#39;)&quot;).fetchall() # Print the results for row in results: print(row) # Close the database connection conn.close() app_schema() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_appName&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_personalUse&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_favoriteFeature&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (5, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Reading Users table in Sqlite.db . Uses SQL SELECT statement to read data . What is a connection object? After you google it, what do you think it does? - provides methods for connecting with a database | Same for cursor object? - It helps sort thru the data, recurses I would imagine | Look at conn object and cursor object in VSCode debugger. What attributes are in the object? - name of connected db, as well as the name of user. It has the port and ip address. | Is &quot;results&quot; an object? How do you know? - Yes, since it has attributes | . import sqlite3 def read(): # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL queries cursor = conn.cursor() # Execute a SELECT statement to retrieve data from a table results = cursor.execute(&quot;PRAGMA table_info(&#39;roof&#39;)&quot;).fetchall() # Print the results if len(results) == 0: print(&quot;Table is empty&quot;) else: for row in results: print(row) # Close the cursor and connection objects cursor.close() conn.close() read() . (0, &#39;id&#39;, &#39;INTEGER&#39;, 1, None, 1) (1, &#39;_appName&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (2, &#39;_personalUse&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (3, &#39;_password&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (4, &#39;_favoriteFeature&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) (5, &#39;_uid&#39;, &#39;VARCHAR(255)&#39;, 1, None, 0) . Create a new User in table in Sqlite.db . Uses SQL INSERT to add row . Compare create() in both SQL lessons. What is better or worse in the two implementations?- the code here is much shorter, and there are different object that are being used for different things, such as conn and cursor  | Explain purpose of SQL INSERT. Is this the same as User init? - allows rows to be installed, and the init function does the same thing | . import sqlite3 def create(): appName = str(input(&quot;New name?&quot;)) uid = str(input(&quot;New uid?&quot;)) password = str(input(&quot;New password?&quot;)) personalUse = str(input(&quot;new personal use?&quot;)) favoriteFeature = str(input(&quot;New Favorite feature?&quot;)) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to insert data into a table cursor.execute(&quot;INSERT INTO users (_appName, _uid, _password, _personalUse, _favoriteFeature) VALUES (?, ?, ?, ?,?)&quot;, (appName, uid, password, personalUse, favoriteFeature)) # Commit the changes to the database conn.commit() print(f&quot;A new user record {uid} has been created&quot;) except sqlite3.Error as error: print(&quot;Error while executing the INSERT:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #create() . Updating a User in table in Sqlite.db . Uses SQL UPDATE to modify password . What does the hacked part do? - it shows the user that if their password is less than 2, their password is &#39;gothackednewpassword123&#39; | Explain try/except, when would except occur? Try would test the code for errors, and except would handle the errors. | What code seems to be repeated in each of these examples to point, why is it repeated? This code seems repeated becuase you need these methods such as cursor because they are required to access the database | . import sqlite3 def update(): uid = input(&quot;Enter user id to update&quot;) password = input(&quot;Enter updated password&quot;) if len(password) &lt; 2: message = &quot;password too small&quot; password = &#39;getanewpassword&#39; else: message = &quot;successfully updated&quot; # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: # Execute an SQL command to update data in a table cursor.execute(&quot;UPDATE users SET _password = ? WHERE _uid = ?&quot;, (password, uid)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: print(f&quot;The row with user id {uid} the password has been {message}&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the UPDATE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #update() . Delete a User in table in Sqlite.db . Uses a delete function to remove a user based on a user input of the id. . Is DELETE a dangerous operation? Why? - This could be dangerous, because you may not be able to retrieve the data all the time and it could be important | In the print statemements, what is the &quot;f&quot; and what does {uid} do? It formats the string so you could put a variable inside of ti | . import sqlite3 def delete(): uid = input(&quot;Enter user id to delete&quot;) # Connect to the database file conn = sqlite3.connect(database) # Create a cursor object to execute SQL commands cursor = conn.cursor() try: cursor.execute(&quot;DELETE FROM users WHERE _uid = ?&quot;, (uid,)) if cursor.rowcount == 0: # The uid was not found in the table print(f&quot;No uid {uid} was not found in the table&quot;) else: # The uid was found in the table and the row was deleted print(f&quot;The row with uid {uid} was successfully deleted&quot;) conn.commit() except sqlite3.Error as error: print(&quot;Error while executing the DELETE:&quot;, error) # Close the cursor and connection objects cursor.close() conn.close() #delete() . Menu Interface to CRUD operations . CRUD and Schema interactions from one location by running menu. Observe input at the top of VSCode, observe output underneath code cell. . Why does the menu repeat? you have the menu function, which calls itself, which is also called recursion | Could you refactor this menu? Make it work with a List? Yes, you could refactor this menu | . def menu(): operation = input(&quot;Enter: (C)reate (R)ead (U)pdate or (D)elete or (S)chema&quot;) if operation.lower() == &#39;c&#39;: create() elif operation.lower() == &#39;r&#39;: read() elif operation.lower() == &#39;u&#39;: update() elif operation.lower() == &#39;d&#39;: delete() elif operation.lower() == &#39;s&#39;: schema() elif len(operation)==0: # Escape Key return else: print(&quot;Please enter c, r, u, or d&quot;) menu() # recursion, repeat menu try: menu() # start menu except: print(&quot;Perform Jupyter &#39;Run All&#39; prior to starting menu&quot;) . import sqlite3 from tabulate import tabulate # Connect to the SQLite database conn = sqlite3.connect(&#39;instance/sqlite.db&#39;) cursor = conn.cursor() # Select all rows from the &quot;dogs&quot; table cursor.execute(&quot;SELECT id, _appName, _uid, _password, _personalUse, _favoriteFeature FROM roof&quot;) rows = cursor.fetchall() # Use tabulate to format the rows as a table table = tabulate(rows, headers=[&quot;appName&quot;, &quot;_uid&quot;, &quot;_password&quot;, &quot;_personalUse&quot;, &quot;_favoriteFeature&quot;]) # Print the table print(table) . appName _uid _password _personalUse _favoriteFeature -- - - 2 youtube youtube sha256$06zvP14uqN5U4SDd$dcdfe6bc9ac3aa2e4daadb21daaf2ef87dbd05cd7a79dbc300cdae2020241c51 I use it to host videos and watch videos I love to watch youtube videos 3 amazon gmail sha256$NfEOqcQh8pkS5UFy$cc0f806a3fe9b628f30175d72484835898cc7e24b8366f9645d129230082d588 I use it to buy things I like the wishlist feature 5 Netflix netflix sha256$elh35v4Oc7wHj0tF$522e5c7eaf695bff33ca610effa5492863c6419452c1f526d972b4e15dc8c26c Watch Movies watching Movies 6 spotify spotify sha256$XNxbeuYx23id9ySc$84b587c7a6213b89c87372e7bff7d620fd7c6e51dc069bffb96722cf7591eec8 music listening music listening 7 photomath photomath sha256$ElMUvfTQ0kEDkNsN$106f8ec2a0b50a836fd3b68969b11427d2cf8a26ced183511c1af59f437c42a2 take pics of math problems and solves it solves math questions 8 k k sha256$fMRio0MmpZ1VvH42$cf61d2320d99675d89c6b74e47ac28d2205939287d542a863109f6a0cab042e6 k k . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In this implementation, do you see procedural abstraction? | In 2.4a or 2.4b lecture Do you see data abstraction? Complement this with Debugging example. Yes, there was data abstraction. One example of this was within the crud menu. When you start to debug that menu, it shows an error that the uid was not found, but it doesnt show the underlying complexity, when you call the menu function. If a user enters an invalid input, it would return something along the lines of not found, but it doesnt show that it had to shift thru the data to find a match, and when it didnt find one, thats when the output is shown. | . | Use Imperative or OOP style to Create a new Table or do something that applies to your CPT project. | . | . Reference... sqlite documentation .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2023/03/16/AP-unit2-4b.html",
            "relUrl": "/2023/03/16/AP-unit2-4b.html",
            "date": " • Mar 16, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | SQLAlchemy db object | | . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User - template of the user | db.Model inheritance - the model inherits different values from db | init method - init. the code, the constructor of the object. There are new objects created from a template of sorts. | @property, @&lt;column&gt;.setter - these are attributes that are used to set up CRUD functions | create, read, update, delete methods - these are basically entirely what you do in a DB, you create, read, update, and delete all the time | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object - it takes data from the u&#39;s and then uses schema to format them correctly | User Object Constructors - from these, you can create infinite database with whatever data you wish to store in them | Try / Except - This is a python code block that lets you test a block on errors. The try helps test the error, and except handles the error | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by creating a filter on a table to find the uid value | user.password - You are supposed to retrieve the password that is stored in the object | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except - it checks if the code already exists | user = User(...) - it assigns data to the object | user.dob and try/except - gets age from DOB, except when theres an error then the except block handles it | user.create() and try/except - It is to initialize the function create() and handle the possible error | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Found {&#39;id&#39;: 1, &#39;name&#39;: &#39;kush&#39;, &#39;uid&#39;: &#39;kush&#39;, &#39;dob&#39;: &#39;03-19-2023&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all - takes data from the table | json_ready assignment, google List Comprehension - formats the output in json | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . ValueError Traceback (most recent call last) /Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 14 in &lt;cell line: 8&gt;() &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # &#34;List Comprehensions&#34;, for each user add user.read() to list &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=7&#39;&gt;8&lt;/a&gt; read() /Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb Cell 14 in read() &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; def read(): &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; with app.app_context(): -&gt; &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; table = User.query.all() &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; json_ready = [user.read() for user in table] # &#34;List Comprehensions&#34;, for each user add user.read() to list &lt;a href=&#39;vscode-notebook-cell:/Users/kushsirohi/Desktop/kushsirohirepo-1/_notebooks/2023-03-13-AP-unit2-4a.ipynb#X16sZmlsZQ%3D%3D?line=5&#39;&gt;6&lt;/a&gt; return json_ready File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/query.py:2697, in Query.all(self) 2675 def all(self) -&gt; List[_T]: 2676 &#34;&#34;&#34;Return the results represented by this :class:`_query.Query` 2677 as a list. 2678 (...) 2695 :meth:`_engine.Result.scalars` - v2 comparable method. 2696 &#34;&#34;&#34; -&gt; 2697 return self._iter().all() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:1756, in ScalarResult.all(self) 1748 def all(self) -&gt; Sequence[_R]: 1749 &#34;&#34;&#34;Return all scalar values in a list. 1750 1751 Equivalent to :meth:`_engine.Result.all` except that (...) 1754 1755 &#34;&#34;&#34; -&gt; 1756 return self._allrows() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:529, in ResultInternal._allrows(self) 525 post_creational_filter = self._post_creational_filter 527 make_row = self._row_getter --&gt; 529 rows = self._fetchall_impl() 530 made_rows: List[_InterimRowType[_R]] 531 if make_row: File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:1663, in FilterResult._fetchall_impl(self) 1662 def _fetchall_impl(self) -&gt; List[_InterimRowType[Row[Any]]]: -&gt; 1663 return self._real_result._fetchall_impl() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:2263, in IteratorResult._fetchall_impl(self) 2261 self._raise_hard_closed() 2262 try: -&gt; 2263 return list(self.iterator) 2264 finally: 2265 self._soft_close() File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/orm/loading.py:191, in instances.&lt;locals&gt;.chunks(size) 189 break 190 else: --&gt; 191 fetch = cursor._raw_all_rows() 193 if single_entity: 194 proc = process[0] File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:521, in ResultInternal._raw_all_rows(self) 519 assert make_row is not None 520 rows = self._fetchall_impl() --&gt; 521 return [make_row(row) for row in rows] File ~/opt/anaconda3/lib/python3.9/site-packages/sqlalchemy/engine/result.py:521, in &lt;listcomp&gt;(.0) 519 assert make_row is not None 520 rows = self._fetchall_impl() --&gt; 521 return [make_row(row) for row in rows] File lib/sqlalchemy/cyextension/resultproxy.pyx:25, in sqlalchemy.cyextension.resultproxy.BaseRow.__init__() File lib/sqlalchemy/cyextension/processors.pyx:45, in sqlalchemy.cyextension.processors.str_to_date() ValueError: Invalid isoformat string: &#39;&#39; . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 2.4a hacks",
            "content": "&quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;ice&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _appName = db.Column(db.String(255), unique=False, nullable=False) _personalUse = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _favoriteFeature = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, favoriteFeature, appName, personalUse, uid, password=&quot;123qwerty&quot;): self._favoriteFeature = favoriteFeature self._appName = appName # variables with self prefix become part of the object, self._personalUse = personalUse self._uid = uid self.set_password(password) #_____________________________________________________________________________________________ # a name getter method, extracts name from object @property def appName(self): return self._appName # a setter function, allows name to be updated after initial object creation @appName.setter def name(self, appName): self._appName = appName #_____________________________________________________________________________________________ # a name getter method, extracts name from object @property def personalUse(self): return self._personalUse # a setter function, allows name to be updated after initial object creation @personalUse.setter def name(self, personalUse): self._appName = personalUse #_____________________________________________________________________________________________ # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid #_____________________________________________________________________________________________ @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result #_____________________________________________________________________________________________ # a name getter method, extracts name from object @property def favoriteFeature(self): return self._favoriteFeature # a setter function, allows name to be updated after initial object creation @favoriteFeature.setter def name(self, favoriteFeature): self._favoriteFeature = favoriteFeature #_____________________________________________________________________________________________ # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;appName&quot;: self.appName, &quot;personalUse&quot;: self.personalUse, &quot;password&quot;: self.password, &quot;favoriteFeature&quot;: self.favoriteFeature, &quot;uid&quot;: self.uid, } # CRUD update: updates user name, password, phone # returns self def update(self, appName = &quot;&quot;, personalUse = &quot;&quot;, favoriteFeature=&quot;&quot;,password=&quot;&quot;, uid=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(appName) &gt; 0: self.appName = appName if len(personalUse) &gt; 0: self.personalUse = personalUse if len(favoriteFeature) &gt; 0: self.favoriteFeature = favoriteFeature if len(password) &gt; 0: self.set_password(password) if len(uid) &gt; 0: self.uid = uid db.session.add(self) # performs update when id exists return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . . # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(appName=&#39;Netflix&#39;, personalUse=&#39;Watch Movies&#39;,favoriteFeature = &quot;watching Movies&quot;, uid=&#39;netflix&#39;, password=&#39;netflix123&#39;) users = [u1] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid netflix, or error. . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object appName = input(&quot;Enter appName: &quot;) personalUse = input(&quot;personalUse: &quot;) favoriteFeature = input(&quot;favoriteFeature: &quot;) password = input(&quot;password: &quot;) uid = input(&quot;uid: &quot;) # Initialize User object before date user = User( appName = appName, personalUse = personalUse, favoriteFeature = favoriteFeature, password = password, uid = uid ) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;appName&#39;: &#39;&#39;, &#39;personalUse&#39;: &#39;&#39;, &#39;password&#39;: &#39;sha256$eQb...&#39;, &#39;favoriteFeature&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;} . def read(): with app.app_context(): table = User.query.all() json_ready = [kush.read() for kush in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;appName&#39;: &#39;Netflix&#39;, &#39;personalUse&#39;: &#39;Watching movies&#39;, &#39;password&#39;: &#39;sha256$RI8...&#39;, &#39;favoriteFeature&#39;: &#39;the recommendation feature&#39;, &#39;uid&#39;: &#39;netflix&#39;}, {&#39;appName&#39;: &#39;google&#39;, &#39;personalUse&#39;: &#39;looking up things&#39;, &#39;password&#39;: &#39;google...&#39;, &#39;favoriteFeature&#39;: &#39;looking up things&#39;, &#39;uid&#39;: &#39;google&#39;}, {&#39;appName&#39;: &#39;robinhood&#39;, &#39;personalUse&#39;: &#39;trading stocks&#39;, &#39;password&#39;: &#39;sha256$MHv...&#39;, &#39;favoriteFeature&#39;: &#39;trading stocks&#39;, &#39;uid&#39;: &#39;robinhood&#39;}, {&#39;appName&#39;: &#39;clash of clans&#39;, &#39;personalUse&#39;: &#39;playing videogames&#39;, &#39;password&#39;: &#39;sha256$n1z...&#39;, &#39;favoriteFeature&#39;: &#39;the color scheme&#39;, &#39;uid&#39;: &#39;clash of clans&#39;}] . delete functionality . def delete(): uid = input(&quot;Enter uid of user that you want to delete: &quot;) user = find_by_uid(uid) with app.app_context(): try: object = user.delete() print(f&quot;{uid} has been deleted. &quot;) print(read()) except: (f&quot;{uid} was not found.&quot;) delete() . Update Functionality . def Updatey(): uid = str(input(&quot;Type the uid of the user you want to change&quot;)) with app.app_context(): user = User.query.filter_by(_uid =uid ).first() with app.app_context(): appName = str(input(&quot;New name?&quot;)) uid = str(input(&quot;New uid?&quot;)) password = str(input(&quot;New password?&quot;)) personalUse = str(input(&quot;new personal use?&quot;)) favoriteFeature = str(input(&quot;New Favorite feature?&quot;)) user._appName = appName user._uid = uid user._password = password user._personalUse = personalUse user._favoriteFeature = favoriteFeature x = user.update() db.session.commit() print(&quot;User has been updated&quot; ) Updatey() . User has been updated . print(read()) . [{&#39;appName&#39;: &#39;glory&#39;, &#39;personalUse&#39;: &#39;rest&#39;, &#39;password&#39;: &#39;glory...&#39;, &#39;favoriteFeature&#39;: &#39;rest&#39;, &#39;uid&#39;: &#39;glory&#39;}, {&#39;appName&#39;: &#39;clock&#39;, &#39;personalUse&#39;: &#39;looking at time&#39;, &#39;password&#39;: &#39;clock...&#39;, &#39;favoriteFeature&#39;: &#39;looking at time&#39;, &#39;uid&#39;: &#39;clock&#39;}, {&#39;appName&#39;: &#39;robinhood&#39;, &#39;personalUse&#39;: &#39;trading stocks&#39;, &#39;password&#39;: &#39;sha256$MHv...&#39;, &#39;favoriteFeature&#39;: &#39;trading stocks&#39;, &#39;uid&#39;: &#39;robinhood&#39;}, {&#39;appName&#39;: &#39;clash of clans&#39;, &#39;personalUse&#39;: &#39;playing videogames&#39;, &#39;password&#39;: &#39;sha256$n1z...&#39;, &#39;favoriteFeature&#39;: &#39;the color scheme&#39;, &#39;uid&#39;: &#39;clash of clans&#39;}] .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2023/03/13/4ahacks.html",
            "relUrl": "/2023/03/13/4ahacks.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd # importing pandas . Notes From Lesson . Panda is a library in python that allows users to play with dataframe | You can use csv files as well as json files | you can display different data using functions found in pandas | . Examples: . df.mean() - finds the mean | df.median() - finds the median of the data | df.max() - finds the max | df.min() - finds the minimum | . you can also print out certain data only, like I did in my code below . CPT project integration guide (personal w/chatgpt) . Read the CSV file using Pandas: Use the read_csv function in Pandas to read the CSV file and store it as a DataFrame. . | Convert the DataFrame to JSON: Use the to_json function in Pandas to convert the DataFrame to JSON format. You can specify the orientation of the JSON file (records, index, columns, values) depending on your needs. . | Create an HTML file: Create an HTML file and include a script tag to load the JSON data. You can use the script tag and set the src attribute to the path of the JSON file. . | Load the JSON data in the HTML file: Use the fetch function in JavaScript to load the JSON data into the HTML file. You can use the fetch function to get the JSON data from the server and parse it using the json function. . | Display the data in the HTML file: Once you have the JSON data, you can use JavaScript to display the data in the HT . | . . Collegeboard prep . 1Q: A researcher is analyzing data about students in a school district to determine whether there is a relationship between grade point average and number of absences. The researcher plans on compiling data from several sources to create a record for each student. . The researcher has access to a database with the following information about each student. . Last name . | First name . | . Grade level (9, 10, 11, or 12) . Grade point average (on a 0.0 to 4.0 scale) . The researcher also has access to another database with the following information about each student. . First name . Last name . Number of absences from school . Number of late arrivals to school . Upon compiling the data, the researcher identifies a problem due to the fact that neither data source uses a unique ID number for each student. Which of the following best describes the problem caused by the lack of unique ID numbers? . 1A: Students who have the same name may be confused with each other. . 2Q: A team of researchers wants to create a program to analyze the amount of pollution reported in roughly 3,000 counties across the United States. The program is intended to combine county data sets and then process the data. Which of the following is most likely to be a challenge in creating the program? . (A) A computer program cannot combine data from different files. . (B) Different counties may organize data in different ways. . (C) The number of counties is too large for the program to process. . (D) The total number of rows of data is too large for the program to process. . 2A: B . 3Q: A student is creating a Web site that is intended to display information about a city based on a city name that a user enters in a text field. Which of the following are likely to be challenges associated with processing city names that users might provide as input? . Select two answers. . (A) Users might attempt to use the Web site to search for multiple cities. . (B) Users might enter abbreviations for the names of cities. . (C) Users might misspell the name of the city. . (D) Users might be slow at typing a city name in the text field. . 3A: B and C . 4Q:A database of information about shows at a concert venue contains the following information. . Name of artist performing at the show . Date of show . Total dollar amount of all tickets sold . Which of the following additional pieces of information would be most useful in determining the artist with the greatest attendance during a particular month? . (A) Average ticket price . (B) Length of the show in minutes . (C) Start time of the show . (D) Total dollar amount of food and drinks sold during the show . 4A: A . 5Q: A camera mounted on the dashboard of a car captures an image of the view from the driver&#8217;s seat every second. Each image is stored as data. Along with each image, the camera also captures and stores the car&#8217;s speed, the date and time, and the car&#8217;s GPS location as metadata. Which of the following can best be determined using only the data and none of the metadata? . (A) The average number of hours per day that the car is in use . (B) The car’s average speed on a particular day . (C) The distance the car traveled on a particular day . (D) The number of bicycles the car passed on a particular day . 5A: D . 6Q: A appName sends students an anonymous survey in order to learn more about the students&#8217; work habits. The survey contains the following questions. . On average, how long does homework take you each night (in minutes)? . On average, how long do you study for each test (in minutes)? . Do you enjoy the subject material of this class (yes or no)? . Which of the following questions about the students who responded to the survey can the appName answer by analyzing the survey results? . I. Do students who enjoy the subject material tend to spend more time on homework each night than the other students do? . II. Do students who spend more time on homework each night tend to spend less time studying for tests than the other students do? . III. Do students who spend more time studying for tests tend to earn higher grades in the class than the other students do? . (A) I only . (B) III only . (C) I and II . (D) I and III . 6A: C . NBA PLAYER Dataset . Here is a dataset that I found online, which displays the stats of nba players . import pandas as pd df = pd.read_csv(&#39;files/NBA.csv&#39;).sort_values(by=[&#39;age&#39;], ascending=False) print(&quot;--FG Top 10&quot;) print(df.head(10)) # Ask the appName the question. Df.head only works when using it in this cell block, but when I add df.tail, it doesnt show. I have to put it in a different cell block for it to show. . --FG Top 10 Unnamed: 0 player_name team_abbreviation age player_height 4698 4698 Kevin Willis DAL 44.0 213.36 270 270 Robert Parish CHI 43.0 215.90 10818 10818 Vince Carter ATL 43.0 198.12 5680 5680 Dikembe Mutombo HOU 43.0 218.44 4892 4892 Dikembe Mutombo HOU 42.0 218.44 12149 12149 Udonis Haslem MIA 42.0 203.20 10240 10240 Vince Carter ATL 42.0 198.12 3795 3795 Kevin Willis ATL 42.0 213.36 1291 1291 Herb Williams NYK 41.0 210.82 2818 2818 John Stockton UTA 41.0 185.42 player_weight college country draft_year draft_round ... 4698 111.130040 Michigan State USA 1984 1 ... 270 110.676448 Centenary (LA) USA 1976 1 ... 10818 99.790240 North Carolina USA 1998 1 ... 5680 117.933920 Georgetown Congo 1991 1 ... 4892 117.933920 Georgetown Congo 1991 1 ... 12149 106.594120 Florida USA Undrafted Undrafted ... 10240 99.790240 North Carolina USA 1998 1 ... 3795 111.130040 Michigan State USA 1984 1 ... 1291 117.933920 Ohio State USA 1981 1 ... 2818 79.378600 Gonzaga USA 1984 1 ... pts reb ast net_rating oreb_pct dreb_pct usg_pct ts_pct 4698 2.4 1.6 0.2 11.9 0.063 0.222 0.184 0.432 270 3.7 2.1 0.5 14.9 0.114 0.130 0.201 0.514 10818 5.0 2.1 0.8 -8.1 0.019 0.114 0.163 0.470 5680 1.8 3.7 0.0 1.8 0.152 0.241 0.111 0.472 4892 3.0 5.1 0.1 3.6 0.118 0.221 0.086 0.591 12149 2.5 1.9 0.3 -9.5 0.043 0.239 0.183 0.495 10240 7.4 2.6 1.1 -6.3 0.021 0.114 0.164 0.565 3795 3.0 2.6 0.3 -15.5 0.091 0.164 0.151 0.434 1291 1.7 1.0 0.0 0.9 0.088 0.103 0.138 0.563 2818 10.8 2.5 7.7 5.2 0.028 0.078 0.191 0.577 ast_pct season 4698 0.034 2006-07 270 0.082 1996-97 10818 0.081 2019-20 5680 0.000 2008-09 4892 0.012 2007-08 12149 0.077 2021-22 10240 0.097 2018-19 3795 0.043 2004-05 1291 0.000 1998-99 2818 0.445 2002-03 [10 rows x 22 columns] . import pandas as pd df = pd.read_csv(&#39;files/NBA.csv&#39;).sort_values(by=[&#39;age&#39;], ascending=False) print(&quot;--bottom 10&quot;) print(df.tail(10)) . --bottom 10 Unnamed: 0 player_name team_abbreviation age player_height 8488 8488 Bruno Caboclo TOR 19.0 205.74 8783 8783 Rashad Vaughn MIL 19.0 198.12 12194 12194 Joshua Primo SAS 19.0 193.04 4410 4410 Martell Webster POR 19.0 200.66 9206 9206 Marquese Chriss PHX 19.0 208.28 10523 10523 Kevin Knox II NYK 19.0 205.74 11829 11829 Jaden Springer PHI 19.0 193.04 342 342 Kobe Bryant LAL 18.0 200.66 78 78 Jermaine O&#39;Neal POR 18.0 210.82 4138 4138 Andrew Bynum LAL 18.0 213.36 player_weight college country draft_year draft_round ... pts 8488 92.986360 None Brazil 2014 1 ... 1.3 8783 91.625584 UNLV USA 2015 1 ... 3.1 12194 85.728888 Alabama Canada 2021 1 ... 5.8 4410 95.254320 None USA 2005 1 ... 6.6 9206 105.686936 Washington USA 2016 1 ... 9.2 10523 97.522280 Kentucky USA 2018 1 ... 12.8 11829 91.625584 Tennessee USA 2021 1 ... 1.0 342 90.718400 None USA 1996 1 ... 7.6 78 102.511792 None USA 1996 1 ... 4.1 4138 124.737800 None USA 2005 1 ... 1.6 reb ast net_rating oreb_pct dreb_pct usg_pct ts_pct ast_pct 8488 0.3 0.0 -60.3 0.048 0.050 0.315 0.417 0.000 8783 1.3 0.6 -6.8 0.012 0.086 0.133 0.398 0.055 12194 2.3 1.6 -3.3 0.031 0.079 0.152 0.487 0.111 4410 2.1 0.6 -14.6 0.029 0.120 0.183 0.533 0.055 9206 4.2 0.7 -10.8 0.058 0.164 0.196 0.529 0.051 10523 4.5 1.1 -13.6 0.025 0.120 0.219 0.475 0.060 11829 1.0 0.0 -72.4 0.143 0.125 0.118 1.000 0.000 342 1.9 1.3 2.2 0.048 0.084 0.244 0.544 0.144 78 2.8 0.2 1.3 0.099 0.198 0.199 0.494 0.030 4138 1.7 0.2 -4.0 0.110 0.154 0.152 0.394 0.044 season 8488 2014-15 8783 2015-16 12194 2021-22 4410 2005-06 9206 2016-17 10523 2018-19 11829 2021-22 342 1996-97 78 1996-97 4138 2005-06 [10 rows x 22 columns] . print(&quot;Here are the players with the highest average points&quot;) print(df[df.pts == df.pts.max()]) print() print(&quot;Here are the players with the lowest average points&quot;) print(df[df.pts == df.pts.min()]) print() . Here are the players with the highest average points Unnamed: 0 player_name team_abbreviation age player_height 10572 10572 James Harden HOU 29.0 195.58 player_weight college country draft_year draft_round ... pts 10572 99.79024 Arizona State USA 2009 1 ... 36.1 reb ast net_rating oreb_pct dreb_pct usg_pct ts_pct ast_pct 10572 6.6 7.5 6.3 0.023 0.157 0.396 0.616 0.394 season 10572 2018-19 [1 rows x 22 columns] Here are the players with the lowest average points Unnamed: 0 player_name team_abbreviation age 3111 3111 Olden Polynice LAC 39.0 2676 2676 Chris Dudley POR 38.0 2090 2090 Muggsy Bogues TOR 36.0 6721 6721 Brian Skinner MEM 36.0 6279 6279 Brian Skinner MIL 35.0 ... ... ... ... ... 3263 3263 Slavko Vranes POR 21.0 11578 11578 Ashton Hagans MIN 21.0 2795 2795 Jamal Sampson MIL 20.0 10310 10310 Ike Anigbogu IND 20.0 4411 4411 Martynas Andriuskevicius CLE 20.0 player_height player_weight college country draft_year 3111 208.28 113.398000 Virginia USA 1987 2676 210.82 117.933920 Yale USA 1987 2090 160.02 61.688512 Wake Forest USA 1987 6721 205.74 115.665960 Baylor USA 1998 6279 205.74 115.665960 Baylor USA 1998 ... ... ... ... ... ... 3263 226.06 124.737800 None USA 2003 11578 190.50 86.182480 Kentucky USA Undrafted 2795 210.82 106.594120 California USA 2002 10310 208.28 113.398000 UCLA USA 2017 4411 218.44 108.862080 None Lithuania 2005 draft_round ... pts reb ast net_rating oreb_pct dreb_pct 3111 1 ... 0.0 1.0 0.5 1.8 0.111 0.100 2676 4 ... 0.0 0.7 0.0 -65.5 0.167 0.000 2090 1 ... 0.0 1.0 1.7 -27.4 0.000 0.120 6721 1 ... 0.0 0.0 0.0 -88.4 0.000 0.000 6279 1 ... 0.0 0.0 0.0 -95.6 0.000 0.000 ... ... ... ... ... ... ... ... ... 3263 2 ... 0.0 0.0 0.0 -10.0 0.000 0.000 11578 Undrafted ... 0.0 0.0 0.0 -21.8 0.000 0.000 2795 2 ... 0.0 0.4 0.2 12.3 0.125 0.125 10310 2 ... 0.0 1.0 0.3 -14.3 0.143 0.250 4411 2 ... 0.0 0.7 0.0 37.1 0.125 0.375 usg_pct ts_pct ast_pct season 3111 0.172 0.0 0.143 2003-04 2676 0.045 0.0 0.000 2002-03 2090 0.078 0.0 0.294 2000-01 6721 0.100 0.0 0.000 2011-12 6279 0.000 0.0 0.000 2010-11 ... ... ... ... ... 3263 0.145 0.0 0.000 2003-04 11578 0.083 0.0 0.000 2020-21 2795 0.118 0.0 0.333 2002-03 10310 0.267 0.0 0.200 2018-19 4411 0.042 0.0 0.000 2005-06 [156 rows x 22 columns] . print(&quot;Average overall stats of the typical player in the NBA&quot;) df.mean() . Average overall stats of the typical player in the NBA . /var/folders/t5/fkg7hq2x4ml17j36_f8wxr000000gn/T/ipykernel_30127/962595910.py:3: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. df.mean() . Unnamed: 0 6152.000000 age 27.084518 player_height 200.611602 player_weight 100.369926 gp 51.290532 pts 8.172775 reb 3.559155 ast 1.813986 net_rating -2.255733 oreb_pct 0.054473 dreb_pct 0.141014 usg_pct 0.184891 ts_pct 0.511060 ast_pct 0.131358 dtype: float64 . print(&quot;Here are the players with their average number of points over 20&quot;) print(df[df.pts &gt; 20.00]) . Here are the players with their average number of points over 20 Unnamed: 0 player_name team_abbreviation age player_height 2995 2995 Karl Malone UTA 39.0 205.74 2199 2199 Michael Jordan WAS 39.0 198.12 2276 2276 Karl Malone UTA 38.0 205.74 2079 2079 Karl Malone UTA 37.0 205.74 12175 12175 LeBron James LAL 37.0 205.74 ... ... ... ... ... ... 11365 11365 Zion Williamson NOP 20.0 200.66 10451 10451 Luka Doncic DAL 20.0 200.66 3120 3120 LeBron James CLE 19.0 203.20 10799 10799 Zion Williamson NOP 19.0 198.12 5208 5208 Kevin Durant SEA 19.0 205.74 player_weight college country draft_year draft_round ... 2995 116.119552 Louisiana Tech USA 1985 1 ... 2199 97.975872 North Carolina USA 1984 1 ... 2276 116.119552 Louisiana Tech USA 1985 1 ... 2079 116.119552 Louisiana Tech USA 1985 1 ... 12175 113.398000 None USA 2003 1 ... ... ... ... ... ... ... ... 11365 128.820128 Duke USA 2019 1 ... 10451 98.883056 None Slovenia 2018 1 ... 3120 108.862080 None USA 2003 1 ... 10799 128.820128 Duke USA 2019 1 ... 5208 97.522280 Texas USA 2007 1 ... pts reb ast net_rating oreb_pct dreb_pct usg_pct ts_pct 2995 20.6 7.8 4.7 3.0 0.049 0.203 0.276 0.534 2199 22.9 5.7 5.2 -0.3 0.027 0.163 0.361 0.468 2276 22.4 8.6 4.3 0.8 0.057 0.218 0.288 0.532 2079 23.2 8.3 4.5 5.8 0.050 0.236 0.299 0.572 12175 30.3 8.2 6.2 -2.5 0.031 0.185 0.317 0.619 ... ... ... ... ... ... ... ... ... 11365 27.0 7.2 3.7 2.1 0.081 0.131 0.287 0.649 10451 21.2 7.8 6.0 -3.1 0.036 0.198 0.296 0.545 3120 20.9 5.5 5.9 -2.6 0.035 0.117 0.280 0.488 10799 22.5 6.3 2.1 5.1 0.092 0.114 0.291 0.616 5208 20.3 4.4 2.4 -11.7 0.027 0.111 0.278 0.519 ast_pct season 2995 0.236 2002-03 2199 0.295 2001-02 2276 0.216 2001-02 2079 0.234 2000-01 12175 0.297 2021-22 ... ... ... 11365 0.188 2020-21 10451 0.317 2018-19 3120 0.268 2003-04 10799 0.119 2019-20 5208 0.120 2007-08 [646 rows x 22 columns] . print(&quot;These are the median stats by the players in the NBA &quot;) df.median() . These are the median stats by the players in the NBA . /var/folders/t5/fkg7hq2x4ml17j36_f8wxr000000gn/T/ipykernel_30127/1381966225.py:2: FutureWarning: Dropping of nuisance columns in DataFrame reductions (with &#39;numeric_only=None&#39;) is deprecated; in a future version this will raise TypeError. Select only valid columns before calling the reduction. df.median() . Unnamed: 0 6152.00000 age 26.00000 player_height 200.66000 player_weight 99.79024 gp 57.00000 pts 6.70000 reb 3.00000 ast 1.20000 net_rating -1.30000 oreb_pct 0.04100 dreb_pct 0.13100 usg_pct 0.18100 ts_pct 0.52400 ast_pct 0.10300 dtype: float64 .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/collegeboard/2023/03/09/AP-unit2-3.html",
            "relUrl": "/collegeboard/2023/03/09/AP-unit2-3.html",
            "date": " • Mar 9, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "2.2 College Board Practice Problems . 1Q: Which of the following is an advantage of a lossless compression algorithm over a lossy compression algorithm? . (A) A lossless compression algorithm can guarantee that compressed information is kept secure, while a lossy compression algorithm cannot. . (B) A lossless compression algorithm can guarantee reconstruction of original data, while a lossy compression algorithm cannot. . (C) A lossless compression algorithm typically allows for faster transmission speeds than does a lossy compression algorithm. . (D) A lossless compression algorithm typically provides a greater reduction in the number of bits stored or transmitted than does a lossy compression algorithm. . 1A: B . 2Q: A user wants to save a data file on an online storage site. The user wants to reduce the size of the file, if possible, and wants to be able to completely restore the file to its original version. Which of the following actions best supports the user&#8217;s needs? . (A) Compressing the file using a lossless compression algorithm before uploading it . (B) Compressing the file using a lossy compression algorithm before uploading it . (C) Compressing the file using both lossy and lossless compression algorithms before uploading it . (D) Uploading the original file without using any compression algorithm . 2A: A . 3Q: A programmer is developing software for a social media platform. The programmer is planning to use compression when users send attachments to other users. Which of the following is a true statement about the use of compression? . (A) Lossless compression of video files will generally save more space than lossy compression of video files. . (B) Lossless compression of an image file will generally result in a file that is equal in size to the original file. . (C) Lossy compression of an image file generally provides a greater reduction in transmission time than lossless compression does. . (D) Sound clips compressed with lossy compression for storage on the platform can be restored to their original quality when they are played. . 3A: C . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. What are commands you use in terminal to access files? . I use cd, cd, locate, mkdir, rmdir, and others when I need them What are the command you use in Windows terminal to access files? | I dont use windows so I wouldnt know, but during the lecture I heard there were some difference What are some of the major differences? | The OS is different, meaning different file paths and whatnot Provide what you observed, struggled with, or leaned while playing with this code. | I saw how the libraries work, the different functions needed to grayscale the images. I played with it and also figured out how to color the images in a different scale, such as pinkscale. I also learned the importance of path, because otherwise the image doesnt show up. Why is path a big deal when working with images? | If the path is incorrect, the image would not show up because the location is incorrect How does the meta data source and label relate to Unit 5 topics? | Meta data is the data behind an image. I would imagine that this data would be stored on a database for later access Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | From what I see online, IPython is a kernel for jupyter that allows for data visualization. My guess would be that you could use IPython to manipulate dataframes, and you could use pandas to display the changes. | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Binary, Base64, and Hexadecimal all convert data from one form to another. From my research, Base64 is used to represent groups of bytes | Translate first 3 letters of your name to Base64. Warning, the answer shown below is most likely incorrect, but its the best I could come up with on my own. Kus Convert to Binary 01101011 01110101 01110011 | Binary to Base64 value: 10 20 44 | Final answer: MzUx (most likely incorrect) | . | . | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? When im watching a youtube video or a netflix show, it takes time to load. | . | From your consumer experience, what effects have you experienced from buffering? I see that it takes time to load, and it typically shows me a percentage sign from 1-100 that shows me how long it takes to load. | How do these effects apply to images I would imagine that images also need time to load, because of their pixels. | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? No, not really. It looks like a series of functions that will be used in later parts of the code | . | Describe Grey Scale algorithm in English or Pseudo code? the grayscale algorithm calculates the intensity value of each pixel based on the relative brightness of the colors | . | Describe scale image? What is before and after on pixels in three images? Scaling the images changes the number of pixels, when it scaled up, new pixels are added to the image, and when an image is scaled down, some of the existing pixels are removed. Scaled up is lossless, scaling down is lossy | . | Is scale image a type of compression? If so, line it up with College Board terms described? Scale transformation is a lossless data transformation, meaning that it does not result in any loss of information. | . | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np from PIL import ImageFilter # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Happy-Face&quot;, &#39;file&#39;: &quot;happyface.png&quot;}, ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average+255, average, average, pixel[3])) # PNG format, changing these values changes the colorscale else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) def image_management_add_blur_text(image): img = image[&#39;pil&#39;] format = image[&#39;format&#39;] # Add Gaussian blur img_blur = img.filter(ImageFilter.GaussianBlur(radius=10)) image[&#39;pil_blur_text&#39;] = img_blur image[&#39;html_blur_text&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img_blur, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print(&quot; blurred &quot;) image_management_add_blur_text(image) display(HTML(image[&#39;html_blur_text&#39;])) . - meta data -- Happy-Face Internet PNG RGBA Original size: (960, 950) Scaled size: (320, 316) -- original image -- . grey image - . blurred . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL - This is an acronym for &quot;Python Imaging Library&quot;. PIL allows me to open, manipulate, and save various image file formats such as png and jpg | numpy - allows for analyzing datasets | base64 - A method to represent data similar to binary or hexadecimal | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey()x @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average+200, average+20, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Happy face&quot;, &#39;file&#39;: &quot;happyface.png&quot;}, ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; redish image &quot;) display(HTML(ido.html_grey)) print() . - meta data -- Happy face Internet happyface.png PNG RGBA Original size: (960, 950) Scaled size: (320, 316) -- scaled image -- . redish image . . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to appName. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/jupyter/2023/03/07/AP-unit2.2.html",
            "relUrl": "/jupyter/2023/03/07/AP-unit2.2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "Lemonaderecipedocx",
            "content": "LEMONADE RECIPE . Step 1: Ingredients: 3 ripe lemons (they need to be a little soft!) … . Step 2: Juice Your Lemons. You need between 1/2 and 2/3 cup of lemon juice. … . Step 3: Make the Simple Syrup. Pour one cup of sugar into your glass measuring cup and add one cup of water on top. … . Step 4: Mix and Serve! .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2023/02/12/LemonadeRecipeDocx.html",
            "relUrl": "/2023/02/12/LemonadeRecipeDocx.html",
            "date": " • Feb 12, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "DNHS BELL SCHEDULE",
            "content": "Monday, Tuesday, Thursday . Period Start Time End Time . Period 1 | 8:35 AM | 9:44 AM | . Period 2 | 9:49 AM | 10:58 AM | . Break | 10:58 AM | 11:08 AM | . Period 3 | 11:13 AM | 12:22 PM | . Lunch | 12:22 PM | 12:52 PM | . Period 4 | 12:57 PM | 2:06 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:36 PM | 3:45 PM | . Wednesday . Period Start Time End Time . Period 1 | 9:55 AM | 10:53 AM | . Period 2 | 10:58 AM | 11:56 AM | . Break | 11:56 AM | 12:06 pM | . Period 3 | 12:11 PM | 1:09 PM | . Lunch | 1:09 PM | 1:39 PM | . Period 4 | 1:44 PM | 2:42 PM | . Office Hours | 2:06 PM | 2:31 PM | . Period 5 | 2:47 PM | 3:45 PM | . Friday . Period Start Time End Time . Period 1 | 8:35 AM | 9:49 AM | . Period 2 | 9:54 AM | 11:08 AM | . Break | 11:08 AM | 11:18 AM | . Period 3 | 11:23 AM | 12:37 PM | . Lunch | 12:37 PM | 1:07 PM | . Period 4 | 1:12 PM | 2:26 PM | . Period 5 | 2:31 PM | 3:45 PM | . .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/markdown/2022/09/05/schedule.html",
            "relUrl": "/markdown/2022/09/05/schedule.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Collegeboard",
            "content": "COllEGE BOARD . . . . What I have been doing with the quizzes recently, is just looking at the code and try to find the most logical answer that I can get from the syntax shows. An example is, if, while, and for. I know what all these mean, but I dont know how to implement them into my own programming. With this quiz, it made me think more logically. The question I got wrong, I had trouble with the syntax, and thats why I didnt understand. In the future, I will study the syntax. .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2022/09/05/collegeboard.html",
            "relUrl": "/2022/09/05/collegeboard.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "First Markdown Post",
            "content": "Markdown is a type of language that similar to html, in the aspect that they both are markup languages . print(&quot;You can also use python&quot;) . this | is a | ordered list | Big heading . Sorta big heading . Small heading .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/markdown/2022/08/21/markdownpost-(1).html",
            "relUrl": "/markdown/2022/08/21/markdownpost-(1).html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "MCQ3",
            "content": "Overall Score: 94% . . Overall Reflection . I found that when I spend more time analyzing each question, I do better on these types of quizzes. Every question that I got wrong werent anything too conceptual, but silly mistakes. | . . Question 22 . . . Answer explanation . Here I chose choice B, while the answer was choice A. You can see, the code iterates in a way that if the arrow can rotate right, it will rotate right. Then, if the arrow can rotate left, it will rotate left. Finally, if the arrow can rotate forward, it will rotate forward. With grid I, it will rotate forward until it hits the side, rotate right twice, and go down until it hits the middle row, then it will rotate right and go forward. After that, it will rotate left and go until it reaches the top row. After, it will rotate left until it hits the destination. . Why did I get this wrong . I simple terms, I rushed this question and did not evaluate option A. I evaluated option B and made an error in my judgement . . Question 33 . . Answer explanation and why I got it wrong . . Here, I chose choice C when the correct answer was choice A. The code segment moves it right, forward, left, forward, and right. It does that 4 times. When I was going thru the steps in my head, it seemed correct that it would go thru 3 times. When I looked at it again just now, I saw that it would only need to repeat twice and repeating it 3 times would leave it three rows above its starting position and one row above the gray square. . . Question 35 . . Answer explanation and why I got it wrong . I picked choice C, when instead I should have picked choice A. The reason I got this incorrect was that I rushed thru this question and did not consider the other choices. Choice A is correct, because if team A has more points than team B, they win. If the first condition is wrong, that mean team B has more points and if team B has more points than team C, they win. If with the else statement, if Team C has more points than A and B, then they win. .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/school/2022/03/12/CBmcq3.html",
            "relUrl": "/school/2022/03/12/CBmcq3.html",
            "date": " • Mar 12, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Project Blog",
            "content": "Future Feature: Learning Module . Program purpose and function . The purpose of the learning feature will make a module where users can learn about day trading, and in the end they could take a quiz that would . Data Abstraction . I would use lists, classes, dictionaries to hold the value for the quiz . Procedural Abstraction . I would use a function that allowed me to make a checkpoint, so when you resolve the help description, it would see that you read it and would complete the training module for that part. . Algorithm Implementation . I would create an algorithm that checks if the user has completed the training module and accordinly notifies the user to do that. .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/school/2022/01/31/projectblog.html",
            "relUrl": "/school/2022/01/31/projectblog.html",
            "date": " • Jan 31, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "College Board Questions",
            "content": "My errors . Question 1 . . In this question, the answer I chose did not correspond with the rules of the program. X=3, Y=2 Z=1 does satisfy the conditions of the program . . In this question, the answer I chose did satisfy the conditons since if you go thru the program, it leads to that destination. The question asked which one DIDNT satisfy the conditons, and if you go thru the steps of the program, you can see that D does not satisfy the conditons of this program . . In this question, I didnt look at all of the choices that I had. I only picked the one. . . In this question, I had misread the signs. If I had chosen J&gt;7, it would result in a infitie loop because there are an infinte number of numbers after 7 . . ## . . . ## . Question 1 .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/markdown/2022/01/31/collegeboardquestions.html",
            "relUrl": "/markdown/2022/01/31/collegeboardquestions.html",
            "date": " • Jan 31, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "5.1 5.2 blog NOTES",
            "content": "5.1, 5.2 blog . Think of three beneficial effects of your projects based on 5.1 Unit . It can help users with learning market patterns and knowing when to invest | It simulates real results without losing any money while day trading | It provides data of the stock market directly to the | . Think of a potential harmful effect of your project. . Our platform is just a simulation so the user does not gain nor lose money. If they get too confident it could lead to them losing money when day trading with real money. | . Answer with an opinion and learnings so far this year: What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . Pros: . It restricts users from innapporpriate websites | Restricts the user from accessing malicous websites | keeps the user focused from distractions that could come from unrestricted sites | . Cons: . Sometimes it restricts websites could be used for academic purposes | . What concerns do you have personally about the digital divide? For yourself or for others. . For others, they may not have the same resources that others have, which could lead them to be less educated. Also, everybody deserves to know the truth, because without it we can be controlled by others. | .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/school/2022/01/29/5.1,-5.2-blog.html",
            "relUrl": "/school/2022/01/29/5.1,-5.2-blog.html",
            "date": " • Jan 29, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "GradingPart3",
            "content": "Student 1 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 0 | 1 | The student does not show that he has a clear understanding of the program function and purpose and does not show the program function. | Data Abstraction|0 | 0 |The program does not show that the student has a an understanding of data abstraction| | Managing Complexity| 0 | 0 | The program does not understanding of managing complexity. When it comes to implementing the complexity, there is not enough material | | Procedural Abstraction | 0 | 0 | The program does not show understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 1 | 0 | The program shows an understanding of algorithm implementation and implemets it well. | Testing | 1| 1|the student clearly demonstrates the program and its code| . Student 2 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 1 | The student shows that he has a clear understanding of the program function and†ns purpose and does show the program function. | Data Abstraction|1 | 1 |The program shows that the sudent has an understanding of data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1| 1 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 1 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 1 | 1 | The program shows an understanding of algorithm implementation and implemets it well. | Testing | 1| 1| the student clearly demonstrates the program and its code| . Student 3 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 1 | The student shows that he has a clear understanding of the program function and purpose and does show the program function. | Data Abstraction|0 | 0 |The program doess not show that the sudent has an understanding of data abstraction . | | Managing Complexity| 1 | 0 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 0 | 0 | The program does not show a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 0 | 0 | The student gives a minimal description of the program algorithm | Testing | 0| 0| The student does not clearly demonstrates the program and its code| . Student 4 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 1 | The student shows that he has a clear understanding of the program function and purpose and does show the program function. | Data Abstraction|1 | 1 |The program shows that the sudent has a an understanding frejuyof data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1 | 1 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 1 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 1 | 0 | The student gives a minimal description of the program algorithm| | Testing | 1| 1| The student clearly demonstrates the program and its code| .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/markdown/2022/01/23/GradingPart3.html",
            "relUrl": "/markdown/2022/01/23/GradingPart3.html",
            "date": " • Jan 23, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "GradingPart2",
            "content": "Student 1 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 0 | The student shows that he has a clear understanding of the program function and purpose and does show the program function. | Data Abstraction|1 | 0 |The program shows that the student has a an understanding of data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1 | 0 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 0 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 1 | 0 | The program shows a understanding of algorithm implementation and implemets it well. | Testing | 1| 1| the student clearly demonstrates the program and its code| . Student 2 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 1 | The student shows that he has a clear understanding of the program function and†ns purpose and does show the program function. | Data Abstraction|1 | 1 |The program shows that the sudent has a an understanding of data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1 | 1 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 1 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 1 | 1 | The program shows a understanding of algorithm implementation and implemets it well. | Testing | 1| 1| the student clearly demonstrates the program and its code| . Student 3 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 0 | The student shows that he has a clear understanding of the program function and purpose and does show the program function. | Data Abstraction|1 | 0 |The program shows that the sudent has a an understanding of data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1 | 0 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 0 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 0 | 0 | The code is not complex | Testing | 1| 1| the student clearly demonstrates the program and its code| . Student 4 . | Category | My score | College board | Commentary | | ———— | ————- | ————- | ————- | | Program Purpose and Function| 1 | 0 | The student shows that he has a clear understanding of the program function and purpose and does show the program function. | Data Abstraction|1 | 0 |The program shows that the sudent has a an understanding frejuyof data abstraction and it to improve the program’s functionality. | | Managing Complexity| 1 | 0 | The program shows a good understanding of managing complexity. When it comes to implementing the complexity, the student does that well | | Procedural Abstraction | 1 | 0 | The program shows a base understanding of procedural abstraction and implements it to improve the program’s functionality. | | Algorithm Implementation | 0 | 0 | There is not much algorithm implementation, I just see code | 1| 1| the student clearly demonstrates the program and its code| .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/markdown/2022/01/23/GradingPart2.html",
            "relUrl": "/markdown/2022/01/23/GradingPart2.html",
            "date": " • Jan 23, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "CPT blog",
            "content": "Student 1 Reflection . Category Student 1 Student 2 College board Student grade Commentary     . Purpose Function | Does describe the overall purpose of the program, as well as the functionality. The input and outpit of the program was described in the video | Does describe the overall purpose of the program, as well as the functionality. The input and outpit of the program was described in the video. | 0/1 | 1/1 | Content Cell |   |   | . Data Abstraction | They do show the the two program code segments, and shos how data has been stores as well. The data in the list relates to the purpose of fullfilling the program purpose | They do show the the two program code segments, and shos how data has been stores as well. The data in the list relates to the purpose of fullfilling the program purpose | 1/1 | 1/1 | Content Cell |   |   | . Managing Complexity | Including a program code segment that shows the complexity in the program | Including a program code segment that shows the complexity in the program | 1/1 | 0/1 | Content Cell |   |   | . Procedure Abstraction | The program includes the necessary segments, one where it is shown that the student develops the procedure with at least one parameter, and one that shows what the procedure is called | The program includes the necessary segments, one where it is shown that the student develops the procedure with at least one parameter, and one that shows what the procedure is called | 1/1 | 1/1 | Content Cell |   |   | . Algorithm Implementation | All of the program code is there, sequencing, selection, iteration, and is explained in detailed steps how the algorithm works. | All of the program code is there, sequencing, selection, iteration, and is explained in detailed steps how the algorithm works | 1/1 | 1/1 | Content Cell |   |   | . Testing | All conditions were tested, and the result was outputted correctly based on the conditions given | All conditions were tested, and the result was outputted correctly based on the conditions given |   | 1/1 | 1/1 | Content Cell | Content Cell | . Student 1 reflection: . - The program served its main served its main purpose, which was giving information of a triangle based on the input. - They lost points on the first critera from collegeboard because even though they showed the input and output, they did not specify the program purpose, instead they described the code/function itself - They lost points on the create preformance task because they did not include an accurate explanition of how the program could be written differently without lists, and how lists are beneficial to the program . Student 2 . The student earned points on all of the criteria. The program’s main purpose is to serve as entertainment for the user, and the program allows the user to place and remove tiles on a grid, which are progressed programatticly by the rules of Game of life, quoting collegeboard. | | .",
            "url": "https://kushsirohi123.github.io/kushsirohirepo/2022/01/23/GradingPart1.html",
            "relUrl": "/2022/01/23/GradingPart1.html",
            "date": " • Jan 23, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "APCSP vocab",
          "content": "md - markdown . .ipynb - jupyter extention . HTML - Hyper Text Markup Language . if statement - conditional statement that decided wether something runs. Very versatile . Def- makes a function, which is essentially resuable code . API - application programming interface, it is a way for the computer for communicate with each other .",
          "url": "https://kushsirohi123.github.io/kushsirohirepo/_pages/2022-08-28-APCSPvocab.html",
          "relUrl": "/_pages/2022-08-28-APCSPvocab.html",
          "date": ""
      }
      
  

  
      ,"page1": {
          "title": "Submenu",
          "content": "| Table | JavaScript | .",
          "url": "https://kushsirohi123.github.io/kushsirohirepo/_pages/2022-09-25-submenu.html",
          "relUrl": "/_pages/2022-09-25-submenu.html",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "About Me",
          "content": "I am a 14 year old sophmore attending del norte high school. I was born in India, and moved to the US when I was 8. Ive been coding for a couple months prior to this class, and im excited to learn new aspects about programming. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://kushsirohi123.github.io/kushsirohirepo/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://kushsirohi123.github.io/kushsirohirepo/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}